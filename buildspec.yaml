version: 0.2
phases:
  install:
    runtime-versions:
      golang: 1.20
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com
  build:
    commands:
      - echo Building the Docker image...          
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AREGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG      
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - aws lambda update-function-code --function-name smwu-004-get-lending-library --image-uri 629515838455.dkr.ecr.ap-northeast-2.amazonaws.com/smwu-004-ecr-get-lending-library:latest
      - echo Updating lambda function environment variables...
      - |
        MAX_ATTEMPTS=10
        ATTEMPT=0
        FUNCTION_STATE=$(aws lambda get-function --function-name smwu-004-get-lending-library --query 'Configuration.State' --output text)
        echo "Initial Lambda function state: $FUNCTION_STATE"
        while [ "$FUNCTION_STATE" != "Active" ] && [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          echo "Waiting for Lambda function to become Active... Attempt $((ATTEMPT+1))"
          sleep 100
          ATTEMPT=$((ATTEMPT+1))
          FUNCTION_STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME --query 'Configuration.State' --output text)
          echo "Current Lambda function state: $FUNCTION_STATE"
        done
        if [ "$FUNCTION_STATE" == "Active" ]; then
          echo "Lambda function is Active. Waiting additional time before proceeding with update..."
          sleep 30
        fi
        - aws lambda update-function-configuration --function-name naver_book_crawler --environment "Variables={REGION=$REGION, AUTH_KEY=$AUTH_KEY, TABLE_NAME=$TABLE_NAME}"
